// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

// User Management
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    password      String? // For email/password auth
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // NextAuth.js Relations
    accounts Account[]
    sessions Session[]

    // Application Relations
    projects     Project[]
    blogPosts    BlogPost[]
    testimonials Testimonial[]

    @@index([email])
    @@index([role])
    @@map("users")
}

// Project Management
model Project {
    id          String  @id @default(cuid())
    title       String
    slug        String  @unique
    description String
    content     String?

    // Technical Details
    technologies String[]
    githubUrl    String?
    liveUrl      String?
    status       ProjectStatus @default(ACTIVE)
    featured     Boolean       @default(false)

    // Media
    thumbnail String?
    images    String[]
    videoUrl  String?

    // Metrics
    viewCount Int @default(0)
    likeCount Int @default(0)

    // Metadata
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    publishedAt DateTime?

    // Relations
    authorId String
    author   User   @relation(fields: [authorId], references: [id])

    categories ProjectCategory[]
    analytics  ProjectAnalytics[]

    @@index([slug])
    @@index([status])
    @@index([featured])
    @@index([authorId])
    @@index([publishedAt])
    @@index([createdAt])
    @@map("projects")
}

// Project Categories
model ProjectCategory {
    id          String  @id @default(cuid())
    name        String  @unique
    slug        String  @unique
    description String?
    color       String  @default("#FFFF00")

    // Relations
    projects Project[]

    @@map("project_categories")
}

// Project Analytics
model ProjectAnalytics {
    id        String   @id @default(cuid())
    projectId String
    event     String // "view", "like", "share", etc.
    metadata  Json?
    createdAt DateTime @default(now())

    // Relations
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@map("project_analytics")
}

// Blog System
model BlogPost {
    id      String  @id @default(cuid())
    title   String
    slug    String  @unique
    excerpt String?
    content String

    // SEO
    metaTitle       String?
    metaDescription String?
    ogImage         String?

    // Publishing
    status      PostStatus @default(DRAFT)
    featured    Boolean    @default(false)
    publishedAt DateTime?

    // Engagement
    viewCount   Int @default(0)
    readingTime Int @default(0)

    // Metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    authorId String
    author   User   @relation(fields: [authorId], references: [id])

    categories BlogCategory[]
    tags       BlogTag[]
    analytics  BlogAnalytics[]

    @@index([slug])
    @@index([status])
    @@index([featured])
    @@index([authorId])
    @@index([publishedAt])
    @@index([createdAt])
    @@map("blog_posts")
}

// Blog Categories
model BlogCategory {
    id          String  @id @default(cuid())
    name        String  @unique
    slug        String  @unique
    description String?
    color       String  @default("#FFFF00")

    // Relations
    posts BlogPost[]

    @@map("blog_categories")
}

// Blog Tags
model BlogTag {
    id   String @id @default(cuid())
    name String @unique
    slug String @unique

    // Relations
    posts BlogPost[]

    @@map("blog_tags")
}

// Blog Analytics
model BlogAnalytics {
    id        String   @id @default(cuid())
    postId    String
    event     String // "view", "share", "time_spent", etc.
    metadata  Json?
    createdAt DateTime @default(now())

    // Relations
    post BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@map("blog_analytics")
}

// GitHub Integration
model GitHubRepository {
    id          String  @id @default(cuid())
    githubId    Int     @unique
    name        String
    fullName    String
    description String?

    // Repository Data
    language     String?
    starCount    Int     @default(0)
    forkCount    Int     @default(0)
    watcherCount Int     @default(0)

    // URLs
    htmlUrl  String
    cloneUrl String

    // Metadata
    isPrivate  Boolean   @default(false)
    isFork     Boolean   @default(false)
    isArchived Boolean   @default(false)
    createdAt  DateTime
    updatedAt  DateTime
    pushedAt   DateTime?
    lastSyncAt DateTime  @default(now())

    // Relations
    contributions GitHubContribution[]

    @@index([githubId])
    @@index([name])
    @@index([language])
    @@index([starCount])
    @@index([lastSyncAt])
    @@index([isPrivate])
    @@map("github_repositories")
}

// GitHub Contributions
model GitHubContribution {
    id           String   @id @default(cuid())
    repositoryId String
    date         DateTime
    count        Int      @default(0)
    level        Int      @default(0) // 0-4 contribution level

    // Relations
    repository GitHubRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

    @@unique([repositoryId, date])
    @@map("github_contributions")
}

// Analytics System
model PageView {
    id        String  @id @default(cuid())
    path      String
    userAgent String?
    referer   String?
    country   String?
    city      String?

    // Session Data
    sessionId String
    userId    String?

    // Metadata
    createdAt DateTime @default(now())

    @@index([path])
    @@index([sessionId])
    @@index([userId])
    @@index([createdAt])
    @@index([country])
    @@map("page_views")
}

// Testimonials
model Testimonial {
    id      String  @id @default(cuid())
    name    String
    email   String? // Store email for verification
    role    String
    company String?

    // Content
    content   String
    rating    Int     @default(5)
    videoUrl  String?
    avatarUrl String?

    // LinkedIn Integration
    linkedinProfile          String? // LinkedIn profile URL
    linkedinRecommendationId String? // Original LinkedIn recommendation ID
    linkedinVerified         Boolean @default(false) // Whether LinkedIn connection is verified

    // Source tracking
    source String @default("direct") // "direct", "linkedin", "import", etc.

    // Display
    featured Boolean @default(false)
    approved Boolean @default(false)

    // Metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    authorId           String?
    author             User?                @relation(fields: [authorId], references: [id])
    projectId          String?
    ServiceTestimonial ServiceTestimonial[]

    @@index([email])
    @@index([linkedinProfile])
    @@index([source])
    @@index([linkedinVerified])
    @@map("testimonials")
}

// Contact Management
model ContactSubmission {
    id      String      @id @default(cuid())
    name    String
    email   String
    subject String?
    message String
    type    ContactType @default(GENERAL)

    // Project Details (for project inquiries)
    projectType String?
    budget      String?
    timeline    String?

    // Status
    status    ContactStatus @default(NEW)
    responded Boolean       @default(false)

    // Metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([email])
    @@index([type])
    @@index([status])
    @@index([createdAt])
    @@index([responded])
    @@map("contact_submissions")
}

// Enums
enum Role {
    USER
    ADMIN
}

enum ProjectStatus {
    DRAFT
    ACTIVE
    ARCHIVED
    FEATURED
}

enum PostStatus {
    DRAFT
    PUBLISHED
    SCHEDULED
    ARCHIVED
}

enum ContactType {
    GENERAL
    PROJECT_INQUIRY
    CONSULTATION
    COLLABORATION
    SUPPORT
}

enum ContactStatus {
    NEW
    IN_PROGRESS
    RESPONDED
    CLOSED
}

// Newsletter Subscribers
model NewsletterSubscriber {
    id           String   @id @default(cuid())
    email        String   @unique
    isActive     Boolean  @default(true)
    subscribedAt DateTime @default(now())

    @@index([email])
    @@index([isActive])
    @@map("newsletter_subscribers")
}

// Services System
model Service {
    id          String  @id @default(cuid())
    name        String
    slug        String  @unique
    description String
    content     String?

    // Pricing
    priceFrom Int? // Price in cents
    priceTo   Int? // Price in cents
    priceType ServicePriceType @default(PROJECT)

    // Features
    features   String[]
    highlights String[]

    // Process
    processSteps Json? // Array of process steps with descriptions

    // Delivery
    deliveryTime String? // e.g., "2-4 weeks"
    deliverables String[]

    // Display
    featured Boolean @default(false)
    popular  Boolean @default(false)
    order    Int     @default(0)

    // SEO
    metaTitle       String?
    metaDescription String?
    ogImage         String?

    // Status
    active Boolean @default(true)

    // Metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    faqs         ServiceFAQ[]
    testimonials ServiceTestimonial[]
    analytics    ServiceAnalytics[]

    @@index([slug])
    @@index([featured])
    @@index([popular])
    @@index([active])
    @@index([order])
    @@map("services")
}

// Service FAQs
model ServiceFAQ {
    id        String @id @default(cuid())
    serviceId String
    question  String
    answer    String
    order     Int    @default(0)

    // Relations
    service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

    @@index([serviceId])
    @@index([order])
    @@map("service_faqs")
}

// Service Testimonials (linking existing testimonials to services)
model ServiceTestimonial {
    id            String @id @default(cuid())
    serviceId     String
    testimonialId String

    // Relations
    service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    testimonial Testimonial @relation(fields: [testimonialId], references: [id], onDelete: Cascade)

    @@unique([serviceId, testimonialId])
    @@map("service_testimonials")
}

// Service Analytics
model ServiceAnalytics {
    id        String   @id @default(cuid())
    serviceId String
    event     String // "view", "inquiry", "booking", "conversion", etc.
    metadata  Json?
    createdAt DateTime @default(now())

    // Relations
    service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

    @@index([serviceId])
    @@index([event])
    @@index([createdAt])
    @@map("service_analytics")
}

// Service Price Types
enum ServicePriceType {
    HOURLY
    PROJECT
    MONTHLY
    CUSTOM
}
